#+TITLE: Brendon's Emacs Config
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes :results silent :noweb yes
#+PROPERTY: CATEGORY emacs
#+STARTUP: content


* Comments
[[file:~/Code/dotfiles/.config/emacs/config/scratch/config.org::*Consult][Old Configuration]]
* Init.el Header

#+begin_src emacs-lisp

  ;;; -*- lexical-binding: t -*-
  ;; NOTE: init.el is now generated from Emacs.org.  Please edit that file
  ;;       in Emacs and init.el will be generated automatically!

#+end_src

* Startup Performance

#+begin_src emacs-lisp

  ;; Disable warnings
  (setq native-comp-async-report-warnings-errors 'silent)
  (setq warning-minimum-level :error)

  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  (defun me/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'me/display-startup-time)
#+end_src

* Package System Setup

Emacs has a built in package manager but it doesn't make it easy to automatically install packages on a new system the first time you pull down your configuration.  [[https://github.com/jwiegley/use-package][use-package]] is a really helpful package used in this configuration to make it a lot easier to automate the installation and configuration of everything else we use.

#+begin_src emacs-lisp

  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("nongnu" . "https://elpa.nongnu.org/nongnu/")
                          ("melpa" . "https://melpa.org/packages/")
                          ("gnu" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

** Automatic Package Updates

The auto-package-update package helps us keep our Emacs packages up to date!  It will prompt you after a certain number of days either at startup or at a specific time of day to remind you to update your packages.

You can also use =M-x auto-package-update-now= to update right now!

#+begin_src emacs-lisp

  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update nil)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))

#+end_src

* Custom Variables
** Custom.el
#+begin_src emacs-lisp

  (setq custom-file "~/.emacs.d/custom.el")

#+end_src
** Fonts

#+begin_src emacs-lisp

  ;; You will most likely need to adjust this font size for your system!
  (defvar me/default-font-size 160)
  (defvar me/default-variable-font-size 160)

#+end_src

** Transparency

#+begin_src emacs-lisp

  ;; Make frame transparency overridable
  (defvar me/frame-transparency '(95 . 95))

#+end_src

** Platforms

#+begin_src emacs-lisp

  (defconst IS-MAC     (eq system-type 'darwin)
    "If the host is running MacOS return true")
  (defconst IS-LINUX   (eq system-type 'gnu/linux)
    "If the host is running Linux return true")
  (defconst IS-WINDOWS (memq system-type '(cygwin windows-nt ms-dos))
    "If the host is running Windows return true")
  (defconst IS-BSD     (or IS-MAC (eq system-type 'berkeley-unix))
    "If the host is running BSD return true")

#+end_src

* Custom Functions

#+begin_src emacs-lisp

  (defun me/alternate-buffer ()
    (interactive)
    (switch-to-buffer (other-buffer)))

  (defun me/save-all-unsaved ()
    "Save all unsaved files. no ask."
    (interactive)
    (save-some-buffers t))

    (add-hook 'focus-out-hook 'me/save-all-unsaved)
    (setq after-focus-change-function 'me/save-all-unsaved)

#+end_src

* Emacs UI

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)

  ;; Have to wrap all of these due to them not working inside Termux on Android or inside terminals
  (when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
  (when (fboundp 'tooltip-mode)
    (tooltip-mode -1))
  (when (fboundp 'menu-bar-mode)
    (menu-bar-mode -1))
  (when (fboundp 'set-fringe-mode)
    (set-fringe-mode 10))

  (setq visible-bell nil)            ;; Set up the visible bell
  (setq ring-bell-function #'ignore) ;; Disable the annoying bell sound

  ;; Set frame transparency
  (set-frame-parameter (selected-frame) 'alpha me/frame-transparency)
  (add-to-list 'default-frame-alist `(alpha . ,me/frame-transparency))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  (setq resize-mini-windows t)
#+end_src
** Line and Column Numbers

#+begin_src emacs-lisp

      ;; Line and column numbers
      (column-number-mode)
      (global-display-line-numbers-mode t)

      ;; Disable line numbers for some modes
      (dolist (mode '(org-mode-hook
                      term-mode-hook
                      shell-mode-hook
                      treemacs-mode-hook
                      eshell-mode-hook
                      org-agenda-mode-hook
                      vterm-mode-hook))
        (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Font Configuration

I am using the [[https://github.com/tonsky/FiraCode][Fira Code]] and [[https://fonts.google.com/specimen/Cantarell][Cantarell]] fonts for this configuration which will more than likely need to be installed on your machine.  Both can usually be found in the various Linux distro package managers or downloaded from the links above.

#+begin_src emacs-lisp

  (set-face-attribute 'default nil :font "Fira Code Retina" :height me/default-font-size)
  (set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height me/default-font-size)

  ;; (when '(IS-MAC)
  ;;   (set-face-attribute 'default nil :font "MonoLisa Custom" :height me/default-font-size)
  ;;   (set-face-attribute 'fixed-pitch nil :font "MonoLisa Custom" :height me/default-font-size))

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "Cantarell" :height me/default-variable-font-size :weight 'regular)

#+end_src

** Confirmations

#+begin_src emacs-lisp

  (defalias 'yes-or-no-p 'y-or-n-p)

#+end_src

** Display Buffers

#+begin_src emacs-lisp
  (customize-set-variable 'display-buffer-base-action
                          '((display-buffer-reuse-window display-buffer-same-window)
                            (reusable-frames . t)))

  (customize-set-variable 'even-window-sizes nil)     ; avoid resizing
#+end_src
* Keybinding Configuration
** Escape Key

#+begin_src emacs-lisp

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

** MacOS Modifiers

#+begin_src emacs-lisp

  (setq mac-command-modifier 'control
          mac-option-modifier 'meta
          mac-control-modifier 'super
          mac-right-command-modifier 'control
          mac-right-option-modifier 'meta
          ns-function-modifier 'hyper)

#+end_src

** Custom Shortcuts
*** Configuration Shortcut
#+begin_src emacs-lisp

  (defun me/open-config ()
    (interactive)
    (find-file (expand-file-name "~/.emacs.d/README.org")))

  (global-set-key (kbd "C-c e e") 'me/open-config)

#+end_src

*** Closing Emacs

#+begin_src emacs-lisp

  (global-set-key (kbd "C-c e q") 'save-buffers-kill-emacs)

#+end_src

*** Half Page Scrolling

#+begin_src emacs-lisp :tangle no

  (defun me/scroll-half-page (direction)
    "Scrolls half page up if `direction' is non-nil, otherwise will scroll half page down."
    (let ((opos (cdr (nth 6 (posn-at-point)))))
      ;; opos = original position line relative to window
      (move-to-window-line nil)  ;; Move cursor to middle line
      (if direction
          (recenter-top-bottom -1)  ;; Current line becomes last
        (recenter-top-bottom 0))  ;; Current line becomes first
      (move-to-window-line opos)))  ;; Restore cursor/point position

  (defun me/scroll-half-page-down ()
    "Scrolls exactly half page down keeping cursor/point position."
    (interactive)
    (me/scroll-half-page nil))

  (defun me/scroll-half-page-up ()
    "Scrolls exactly half page up keeping cursor/point position."
    (interactive)
    (me/scroll-half-page t))

  (global-set-key (kbd "C-v") 'me/scroll-half-page-down)
  (global-set-key (kbd "M-v") 'me/scroll-half-page-up)
#+end_src

* Emacs Functionality
** Completion

#+begin_src emacs-lisp

  (recentf-mode 1)
  (setq recentf-max-menu-items 25)
  (setq recentf-max-saved-items 25)

  (setq read-file-name-completion-ignore-case t
        read-buffer-completion-ignore-case t
        completion-ignore-case t
        completion-cycle-threshold 3
        tab-always-indent 'complete)
  ;; Use `consult-completion-in-region' if Vertico is enabled.
  ;; Otherwise use the default `completion--in-region' function.
  (setq completion-in-region-function
        (lambda (&rest args)
          (apply (if vertico-mode
                     #'consult-completion-in-region
                   #'completion--in-region)
                 args)))
#+end_src
** Minibuffer

#+begin_src emacs-lisp

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  (setq read-extended-command-predicate
        #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t)

#+end_src
** Winner Mode

#+begin_src emacs-lisp

  (winner-mode 1)

#+end_src

** UTF 8

#+begin_src emacs-lisp

  (set-language-environment "UTF-8")
  
#+end_src

* Package Configuration
** Path Configuration (Mac Only)

#+begin_src emacs-lisp

  (when '(IS-MAC)
    (use-package exec-path-from-shell
      :config
      (exec-path-from-shell-initialize)))
  
#+end_src

** Behavior
*** Scratch Buffers
#+begin_src emacs-lisp
  (use-package persistent-scratch
    :after (no-littering org)
    :custom ((persistent-scratch-autosave-interval 180))
    :config
    (add-hook 'after-init-hook 'persistent-scratch-setup-default))
#+end_src
*** Keep Folders Clean

We use the [[https://github.com/emacscollective/no-littering/blob/master/no-littering.el][no-littering]] package to keep folders where we edit files and the Emacs configuration folder clean!  It knows about a wide variety of variables for built in Emacs features as well as those from community packages so it can be much easier than finding and setting these variables yourself.

#+begin_src emacs-lisp

  ;; NOTE: If you want to move everything out of the ~/.emacs.d folder
  ;; reliably, set `user-emacs-directory` before loading no-littering!
                                          ;(setq user-emacs-directory "~/.cache/emacs")

  (use-package no-littering
    :config
    (add-to-list 'recentf-exclude no-littering-var-directory)
    (add-to-list 'recentf-exclude no-littering-etc-directory)

    ;; no-littering doesn't set this by default so we must place
    ;; auto save files in the same path as it uses for sessions
    (setq auto-save-file-name-transforms
          `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))))

#+end_src

** Keybindings
*** Evil
**** Evil Mode
#+begin_src emacs-lisp

  (use-package evil
    :init
    (setq evil-want-integration t
          evil-want-keybinding nil
          evil-want-C-u-scroll t
          evil-want-C-i-jump nil
          evil-respect-visual-line-mode t
          evil-undo-system 'undo-tree)
    :config

    (evil-mode 1)

    ;; Rebind Universal Argument
    (define-key evil-motion-state-map (kbd "M-u") 'universal-argument)
    (define-key evil-insert-state-map (kbd "C-u") 'universal-argument)

    ;; Exit insert with Emacs C-g bind
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    ;; L and H To end/beginning of line respectively
    (evil-global-set-key 'motion "L" 'evil-end-of-line-or-visual-line)
    (evil-global-set-key 'motion "H" 'evil-first-non-blank-of-visual-line)

    ;; Initial states
    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

#+end_src

**** Evil Collection

#+begin_src emacs-lisp

  (use-package evil-collection
    :diminish evil-collection-unimpaired-mode
    :after evil
    :config
    (evil-collection-init))

#+end_src

**** Evil Escape

For using my favorite bind =jk= to easily exit insert mode

#+begin_src emacs-lisp

  (use-package evil-escape
    :after evil
    :config
    (progn
      (evil-escape-mode)
      (setq-default evil-escape-key-sequence "jk")
      (setq evil-escape-delay 0.15)
      (add-hook 'evil-escape-inhibit-functions
                (defun +evil-inhibit-escape-in-minibuffer-fn ()
                  (and (minibufferp)
                       (or (not (bound-and-true-p evil-collection-setup-minibuffer))
                           (evil-normal-state-p)))))))

#+end_src

**** Evil Org Mode

#+begin_src emacs-lisp

  (use-package evil-org
    :after org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
              (lambda () (evil-org-set-key-theme)))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))

#+end_src

*** God Mode

For removing the ~C-<letter>~ from Emacs Mode. I need to work on learning this some more.

Not currently enabled by default. Use ~M-x god-mode~ to toggle

#+begin_src emacs-lisp

  (use-package god-mode
     ;; :bind (("C-S-g" . god-mode))
     :defer t)

#+end_src

** Editing
*** Undo Tree

For smarter undo functionality inside Emacs

#+begin_src emacs-lisp

  (use-package undo-tree
    :diminish undo-tree-mode
    :init
    (global-undo-tree-mode))

#+end_src
*** Avy
#+begin_src emacs-lisp

  (use-package avy
    :config

    (evil-global-set-key 'motion (kbd "C-:") 'avy-resume)
    (evil-global-set-key 'motion (kbd "C-f") 'avy-goto-char)
    (evil-global-set-key 'motion (kbd "C-'") 'avy-goto-char-2)
    (evil-global-set-key 'motion (kbd "M-g g") 'avy-goto-line)
    (evil-global-set-key 'motion (kbd "M-g w") 'avy-goto-word-1)
    (evil-global-set-key 'motion (kbd "M-g e") 'avy-goto-word-0)


    (global-set-key (kbd "C-:") 'avy-resume)
    (global-set-key (kbd "C-f") 'avy-goto-char)
    (global-set-key (kbd "C-'") 'avy-goto-char-2)
    (global-set-key (kbd "M-g g") 'avy-goto-line)
    (global-set-key (kbd "M-g w") 'avy-goto-word-1)
    (global-set-key (kbd "M-g e") 'avy-goto-word-0))
#+end_src
** UI
*** Theme

[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] is a great set of themes with a lot of variety and support for many different Emacs modes.  Taking a look at the [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][screenshots]] might help you decide which one you like best.  You can also run =M-x counsel-load-theme= to choose between them easily.

#+begin_src emacs-lisp

(use-package doom-themes
  :init (load-theme 'doom-vibrant t))

#+end_src

*** All The Icons

*NOTE:* The first time you load your configuration on a new machine, you'll need to run `M-x all-the-icons-install-fonts` so that mode line icons display correctly.

#+begin_src emacs-lisp

  (use-package all-the-icons)

  (use-package all-the-icons-completion
    :after all-the-icons
    :init
    (all-the-icons-completion-mode))

  (use-package all-the-icons-dired
    :after all-the-icons)

#+end_src

*** Doom Modeline

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs.  The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

#+begin_src emacs-lisp

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)
             (doom-modeline-bar-width 6)
             (doom-modeline-minor-modes t)
             (doom-modeline-buffer-file-name-style 'truncate-except-project)
             (doom-modeline-minor-modes nil)
             (doom-modeline-persp-name t)
             (doom-modeline-display-default-persp-name t)
             (doom-modeline-persp-icon t)
             (doom-modeline-modal-icon t))
    ;; This configuration to is fix a bug where certain windows would not display
    ;; their full content due to the overlapping modeline
    :config (advice-add #'fit-window-to-buffer :before (lambda (&rest _) (redisplay t))))

#+end_src

*** Which Key

[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix.  For example, if you press =C-c= (hold control and press the letter =c=), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run.  This is very useful for learning the possible key bindings in the mode of your current buffer.

#+begin_src emacs-lisp

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-use-C-h-commands nil)
    (setq which-key-idle-delay 0.5))

#+end_src

*** Persist History on Restart

#+begin_src emacs-lisp

  (use-package savehist
    :init
    (savehist-mode))

#+end_src

*** Perspective
#+begin_src emacs-lisp

  (use-package perspective
    :custom
    (persp-mode-prefix-key (kbd "C-c w"))  ; pick your own prefix key here
    :init
    (setq persp-state-default-file (concat persp-save-dir "persp-state"))
    (setq persp-modestring-short t)
    :config
    (unless (equal persp-mode t)
      (persp-mode))
    (add-hook 'kill-emacs-hook #'persp-state-save))
#+end_src
*** Completion
**** Consult

#+begin_src emacs-lisp
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (("C-c s a" . consult-org-agenda)
           ("C-c s o" . consult-outline)
           ("C-c s s" . consult-org-heading)
           ("C-c r" . consult-recent-file)
           ("C-c h" . consult-history)
           ("C-c m" . consult-mode-command)
           ("C-c k" . consult-kmacro)
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ("<help> a" . consult-apropos)            ;; orig. apropos-command
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ("M-s d" . consult-find)
           ("M-s D" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("C-s" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s m" . consult-multi-occur)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    ;;:hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    (setq consult-preview-key (kbd "M-."))
    (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme
     :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-recent-file
     consult--source-project-recent-file
     :preview-key (kbd "M-."))
    (consult-customize consult--source-buffer :hidden t :default nil)
    (add-to-list 'consult-buffer-sources persp-consult-source)
    (setq consult-narrow-key "<"))
#+end_src

**** Orderless Completion

#+begin_src emacs-lisp

  (use-package orderless
    :demand t
    :config
    (defvar +orderless-dispatch-alist
      '((?% . char-fold-to-regexp)
        (?! . orderless-without-literal)
        (?`. orderless-initialism)
        (?= . orderless-literal)
        (?~ . orderless-flex)))

    ;; Recognizes the following patterns:
    ;; * ~flex flex~
    ;; * =literal literal=
    ;; * %char-fold char-fold%
    ;; * `initialism initialism`
    ;; * !without-literal without-literal!
    ;; * .ext (file extension)
    ;; * regexp$ (regexp matching at end)
    (defun +orderless-dispatch (pattern index _total)
      (cond
       ;; Ensure that $ works with Consult commands, which add disambiguation suffixes
       ((string-suffix-p "$" pattern)
        `(orderless-regexp . ,(concat (substring pattern 0 -1) "[\x200000-\x300000]*$")))
       ;; File extensions
       ((and
         ;; Completing filename or eshell
         (or minibuffer-completing-file-name
             (derived-mode-p 'eshell-mode))
         ;; File extension
         (string-match-p "\\`\\.." pattern))
        `(orderless-regexp . ,(concat "\\." (substring pattern 1) "[\x200000-\x300000]*$")))
       ;; Ignore single !
       ((string= "!" pattern) `(orderless-literal . ""))
       ;; Prefix and suffix
       ((if-let (x (assq (aref pattern 0) +orderless-dispatch-alist))
            (cons (cdr x) (substring pattern 1))
          (when-let (x (assq (aref pattern (1- (length pattern))) +orderless-dispatch-alist))
            (cons (cdr x) (substring pattern 0 -1)))))))

    ;; Define orderless style with initialism by default
    (orderless-define-completion-style +orderless-with-initialism
      (orderless-matching-styles '(orderless-initialism orderless-literal orderless-regexp)))

    ;; You may want to combine the `orderless` style with `substring` and/or `basic`.
    ;; There are many details to consider, but the following configurations all work well.
    ;; Personally I (@minad) use option 3 currently. Also note that you may want to configure
    ;; special styles for special completion categories, e.g., partial-completion for files.
    ;;
    ;; 1. (setq completion-styles '(orderless))
    ;; This configuration results in a very coherent completion experience,
    ;; since orderless is used always and exclusively. But it may not work
    ;; in all scenarios. Prefix expansion with TAB is not possible.
    ;;
    ;; 2. (setq completion-styles '(substring orderless))
    ;; By trying substring before orderless, TAB expansion is possible.
    ;; The downside is that you can observe the switch from substring to orderless
    ;; during completion, less coherent.
    ;;
    ;; 3. (setq completion-styles '(orderless basic))
    ;; Certain dynamic completion tables (completion-table-dynamic)
    ;; do not work properly with orderless. One can add basic as a fallback.
    ;; Basic will only be used when orderless fails, which happens only for
    ;; these special tables.
    ;;
    ;; 4. (setq completion-styles '(substring orderless basic))
    ;; Combine substring, orderless and basic.
    ;;
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          ;;; Enable partial-completion for files.
          ;;; Either give orderless precedence or partial-completion.
          ;;; Note that completion-category-overrides is not really an override,
          ;;; but rather prepended to the default completion-styles.
          ;; completion-category-overrides '((file (styles orderless partial-completion))) ;; orderless is tried first
          completion-category-overrides '((file (styles partial-completion)) ;; partial-completion is tried first
                                          (consult-multi (styles orderless+initialism))
                                          ;; enable initialism by default for symbols
                                          (command (styles +orderless-with-initialism))
                                          (variable (styles +orderless-with-initialism))
                                          (symbol (styles +orderless-with-initialism)))
          orderless-component-separator #'orderless-escapable-split-on-space ;; allow escaping space with backslash!
          orderless-style-dispatchers '(+orderless-dispatch)))
#+end_src

**** Marginalia

#+begin_src emacs-lisp

  (use-package marginalia
    :bind (("M-A" . marginalia-cycle)
           :map minibuffer-local-map
           ("M-A" . marginalia-cycle))

    :init
    (marginalia-mode)
    :config
    (add-hook 'marginalia-mode-hook #'all-the-icons-completion-marginalia-setup))

#+end_src

**** Embark

#+begin_src emacs-lisp

  (use-package embark
    :ensure t
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
    :init
    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)
    :config
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t
    :after (embark consult)
    :demand t ; only necessary if you have the hook below
    ;; if you want to have consult previews as you move around an
    ;; auto-updating embark collect buffer
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))

#+end_src

**** Corfu

#+begin_src emacs-lisp

  (use-package corfu
  ;; Optional customizations
   :custom
   (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
   (corfu-auto t)                 ;; Enable auto completion
   (corfu-separator ?\s)          ;; Orderless field separator
  ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  ;; (corfu-preselect-first nil)    ;; Disable candidate preselection
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-echo-documentation nil) ;; Disable documentation in the echo area
  ;; (corfu-scroll-margin 5)        ;; Use scroll margin

  ;; Enable Corfu only for certain modes.
  ;; :hook ((prog-mode . corfu-mode)
  ;;        (shell-mode . corfu-mode)
  ;;        (eshell-mode . corfu-mode))

  ;; Recommended: Enable Corfu globally.
  ;; This is recommended since Dabbrev can be used globally (M-/).
  ;; See also `corfu-excluded-modes'.
  :init
  (global-corfu-mode))

#+end_src

*** Vertico

#+begin_src emacs-lisp

  (use-package vertico
    :init
    (vertico-mode)
    :bind (:map vertico-map
                ("C-j" . vertico-next)
                ("C-J" . vertico-next-group)
                ("C-k" . vertico-previous)
                ("C-K" . vertico-previous-group)
                ("M-RET" . minibuffer-force-complete-and-exit)
                ("M-TAB" . minibuffer-complete)))

  (use-package vertico-directory
    :after vertico
    :ensure nil
    :bind (:map vertico-map
                ("RET" . vertico-directory-enter)
                ("DEL" . vertico-directory-delete-char)
                ("M-DEL" . vertico-directory-delete-word))
    :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))

#+end_src

*** Helpful Help Commands

[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs' =describe-= command buffers.  For example, if you use =describe-function=, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration.  It is very useful for figuring out how things work in Emacs.

#+begin_src emacs-lisp

  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    ;;:custom
    ;; (counsel-describe-function-function #'helpful-callable)
    ;; (counsel-describe-variable-function #'helpful-variable)
    :bind
    ("H-d" . helpful-at-point)
    ([remap describe-function] . helpful-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-key] . helpful-key)
    :config
    (evil-global-set-key 'motion "K" 'helpful-at-point)
    )

#+end_src

*** Hydra

This is an example of using [[https://github.com/abo-abo/hydra][Hydra]] to design a transient key binding for quickly adjusting the scale of the text on screen.  We define a hydra that is bound to =C-s t s= and, once activated, =j= and =k= increase and decrease the text scale.  You can press any other key (or =f= specifically) to exit the transient key map.

#+begin_src emacs-lisp

  (use-package hydra
    :defer t)

#+end_src

**** Text Scaling

#+begin_src emacs-lisp

  (defhydra me/hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (global-set-key (kbd "C-c T f") 'me/hydra-text-scale/body)

#+end_src

**** Buffer Management

#+begin_src emacs-lisp

  (defhydra me/hydra-buffers (:color blue :hint nil)
    "
                                                                         ╭─────────┐
       Move to Window         Switch                  Do                 │ Buffers │
    ╭────────────────────────────────────────────────────────────────────┴─────────╯
             ^_k_^          [_b_] switch             [_d_] kill the buffer
             ^^↑^^          [_i_] ibuffer            [_r_] toggle read-only mode
         _h_ ←   → _l_      [_a_] alternate          [_u_] revert buffer changes
             ^^↓^^          [_o_] other              [_w_] save buffer
             ^_j_^
    --------------------------------------------------------------------------------
                "
    ("<tab>" hydra-master/body "back")
    ("<ESC>" nil "quit")
    ("a" me/alternate-buffer)
    ("b" consult-buffer)
    ("d" kill-current-buffer)
    ("i" ibuffer)
    ("o" other-window)
    ("h" windmove-left  :color red)
    ("k" windmove-up    :color red)
    ("j" windmove-down  :color red)
    ("l" windmove-right :color red)
    ("r" read-only-mode)
    ("u" revert-buffer)
    ("w" save-buffer))

  (global-set-key (kbd "C-c b") 'me/hydra-buffers/body)

#+end_src

**** Window Management

#+begin_src emacs-lisp

  (defhydra me/hydra-windows (:color blue :hint nil)
    "
                                                                         ╭─────────┐
       Move to      Size    Scroll        Split                    Do    │ Windows │
    ╭────────────────────────────────────────────────────────────────────┴─────────╯
          ^_k_^           ^_K_^       ^_p_^    ╭─┬─┐^ ^        ╭─┬─┐^ ^         ↺ [_u_] undo layout
          ^^↑^^           ^^↑^^       ^^↑^^    │ │ │_v_ertical ├─┼─┤_b_alance   ↻ [_r_] restore layout
      _h_ ←   → _l_   _H_ ←   → _L_   ^^ ^^    ╰─┴─╯^ ^        ╰─┴─╯^ ^         ✗ [_d_] close window
          ^^↓^^           ^^↓^^       ^^↓^^    ╭───┐^ ^        ╭───┐^ ^         ⇋ [_w_] cycle window
          ^_j_^           ^_J_^       ^_n_^    ├───┤_s_tack    │   │_z_oom
          ^^ ^^           ^^ ^^       ^^ ^^    ╰───╯^ ^        ╰───╯^ ^
    --------------------------------------------------------------------------------
              "
    ("<tab>" hydra-master/body "back")
    ("<ESC>" nil "quit")
    ("n" scroll-other-window :color red)
    ("p" scroll-other-window-down :color red)
    ("b" balance-windows)
    ("d" delete-window)
    ("H" shrink-window-horizontally :color red)
    ("h" windmove-left :color red)
    ("J" shrink-window :color red)
    ("j" windmove-down :color red)
    ("K" enlarge-window :color red)
    ("k" windmove-up :color red)
    ("L" enlarge-window-horizontally :color red)
    ("l" windmove-right :color red)
    ("r" winner-redo :color red)
    ("s" split-window-vertically :color red)
    ("u" winner-undo :color red)
    ("v" split-window-horizontally :color red)
    ("w" other-window)
    ("z" delete-other-windows))

  (global-set-key (kbd "C-c W") 'me/hydra-windows/body)

#+end_src

*** Origami

#+begin_src emacs-lisp

  (use-package origami)

#+end_src

** Org Mode
*** Information

Task Statuses

| *Status* | *Usage*                                               |
| TODO(t)  | Task waiting to begin                                 |
| NEXT(n)  | Task that will be taken on next                       |
| PROG(p)  | Task that is currently in progress                    |
| INTR(i)  | Urgent things that I need to drop everything else for |
| DONE(d)  | Tasks that have been completed                        |
| CANC(c)  | Tasks that have been abandoned                        |

Date Usage

+-----------+----------------------------------------------+
| *Type*    | *Usage*                                      |
+-----------+----------------------------------------------+
| SCHEDULED | Task That should be started on or after this |
|           |date (blocked tasks that are in progress etc, |
|           |           should have a schedule)            |
+-----------+----------------------------------------------+
| DEADLINE  | Task that should be completed by this date   |
+-----------+----------------------------------------------+
| Timestamp | Non-actionable tasks at this time            |
|           |(appointments)                                |
+-----------+----------------------------------------------+

*** Configuration
**** Org Setup

#+begin_src emacs-lisp

  (defun me/org-mode-initial-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

#+end_src

**** Org Files

#+begin_src emacs-lisp

  ;; Directories
  (defconst me/org-dir "~/Org/")

  ;; Files
  (defconst me/org-todo-file (concat me/org-dir "todo.org"))
  (defconst me/org-note-inbox-file (concat me/org-dir "notes/inbox.org"))
  (defconst me/org-personal-note-file (concat me/org-dir "notes/personal.org"))
  (defconst me/org-work-note-file (concat me/org-dir "notes/work.org"))
  (defconst me/org-projects-file (concat me/org-dir "projects.org"))
  (defconst me/org-snippet-file (concat me/org-dir "notes/snippets.org"))
  (defconst me/org-mobile-file (concat me/org-dir "mobile.org"))
  (defconst me/org-distractions-file (concat me/org-dir "distractions.org"))
  (defconst me/org-journal-file (concat me/org-dir "journal.org"))
  (defconst me/org-archive-file (concat me/org-dir "archive.org"))
  (defconst me/org-emacs-config-file (concat user-emacs-directory "README.org"))

  ;; Archive
  (defconst me/org-archive-location (concat me/org-archive-file "::* From %s"))

  (defvar me/org-agenda-files (list me/org-todo-file me/org-projects-file me/org-mobile-file me/org-distractions-file me/org-journal-file me/org-emacs-config-file me/org-archive-file))
  (defvar me/org-refile-files (list me/org-todo-file me/org-projects-file me/org-mobile-file me/org-distractions-file me/org-journal-file me/org-archive-file))
#+end_src

**** Org Settings

#+begin_src emacs-lisp

  (defun me/org-settings-setup ()
    (progn
      ;; Directories
      (setq org-directory me/org-dir)
      (setq org-archive-location me/org-archive-location)

      ;; Visuals
      (setq org-ellipsis " ▾")
      (setq org-pretty-entities t)

      ;; Behavior
      (setq org-cycle-emulate-tab 'whitestart)
      (setq org-catch-invisible-edits 'smart)
      (setq org-link-search-must-match-exact-headline nil)
      (setq org-log-done 'time)
      (setq org-log-into-drawer t)
      (setq org-extend-today-until 4)
      (setq org-duration-format 'h:mm)
      (setq-default org-enforce-todo-dependencies t)

      ;; Source Editing
      (setq org-edit-src-turn-on-auto-save t)

      ;; Time and Clock settings
      (setq org-clock-out-when-done t)
      (setq org-clock-idle-time nil)

      ;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
      (setq org-clock-out-remove-zero-time-clocks t)

      ;; Use a function to decide what to change the state to.
      (defun me/switch-task-on-clock-start (task-state)
        (if (or (string= task-state "TODO")(string= task-state "NEXT"))
            "PROG"
          task-state))

      (defun me/switch-task-on-clock-out (task-state)
        (if (string= task-state "PROG")
            "NEXT"
          task-state))

      (setq org-clock-in-switch-to-state #'me/switch-task-on-clock-start)
      (setq org-clock-out-switch-to-state #'me/switch-task-on-clock-out)

      ;; Resume clocking task on clock-in if the clock is open
      (setq org-clock-in-resume t)

      ;; Save the running clock and all clock history when exiting Emacs, load it on startup
      (setq org-clock-persist t)

      ;; Refile
      (setq org-refile-target-files me/org-refile-files)
      (setq org-refile-targets '((org-refile-target-files :maxlevel . 5)))))
#+end_src

**** TODO [#C] Org Keybinds
SCHEDULED: <2022-05-29 Sun>

Need to fix this. Add hooks for mode specific keys and use =define-local?= to define said keys
#+begin_src emacs-lisp
  (defun me/insert-timestamp ()
    (interactive)
    (let ((current-prefix-arg '(16))) (call-interactively 'org-time-stamp-inactive))) ; Universal Argument x2 - 4*4
  ; This should be org specific
  (global-set-key (kbd "C-c o t") 'me/insert-timestamp)
;  (global-set-key (kbd "C-c o c") 'org-clock-goto)
;  (add-hook ')


;  (global-set-key (kbd "C-c o c") 'org-clock-goto)
;  (global-set-key (kbd "C-c o c") 'org-clock-goto)
;  (define-key )
#+end_src

**** Org Habit Settings

#+begin_src emacs-lisp

  (defun me/org-habit-setup ()
    (progn
      (require 'org-habit)
      (add-to-list 'org-modules 'org-habit)
      (setq org-habit-today-glyph ?◌)
      (setq org-habit-completed-glyph ?●)
      (setq org-habit-missed-glyph ?○)
      (setq org-habit-preceding-days 10)
      (setq org-habit-show-habits-only-for-today t
            org-habit-graph-column 65)))

#+end_src

**** Todos and Tags

#+begin_src emacs-lisp

  (defun me/org-todo-tag-setup ()
    (progn
      (setq org-todo-keywords
            '((sequence "TODO(t)" "NEXT(n)" "PROG(p)" "INTR(i!)" "|" "DONE(d!)" "CANCELLED(c@)")
              (sequence "APT(a)" "SOMEDAY(s)" "NOTE(N)" "PROJ(P)" "IDEA(I)" "DEPR(D)")
              (sequence "[ ](x)" "[-](-)" "|" "[X](X)")))

      (setq org-todo-keyword-faces
            '(
              ("TODO" . (:foreground "#ff39a3" :weight bold))
              ("NEXT" . (:foreground "DeepSkyBlue"
                                     :weight bold))
              ("PROG"  . (:foreground "orangered"
                                      :weight bold))
              ("INTR" . (:foreground "pink"
                                     :weight bold))
              ("DONE" . (:foreground "#008080"
                                     :weight bold))
              ("CANCELLED" . (:foreground "darkgrey"
                                          :weight bold))
              ("NOTE" . (:foreground "#9fc5e8"
                                     :weight bold))
              ("PROJ" . (:foreground "#B4A7D6"
                                     :weight bold))
              ("IDEA" . (:foreground "VioletRed4"
                                     :weight bold))
              ("DEPR" . (:foreground "darkgrey"
                                     :weight bold))))

      (setq org-tag-persistent-alist
            '((:startgroup)
              ("@errand" . ?E)
              ("@home" . ?h)
              ("@work" . ?w)
              ("@emacs" . ?e)
              (:endgroup)
              ("inbox" . ?I)
              ("routine" . ?r)
              ("bookmark" . ?b)
              ("backlog" . ?B)
              ("idea" . ?i)
              ("distraction" . ?d)))
      (setq org-tag-faces
            '(("@errand" . (:foreground "mediumPurple1" :weight bold))
              ("@home" . (:foreground "royalblue1" :weight bold))
              ("@work" . (:foreground "#1CC436" :weight bold))
              ("@emacs" . (:foreground "forest green" :weight bold))
              ("routine" . (:foreground "#CFE2F3" :weight regular))
              ("inbox" . (:foreground "#CFE2F3" :weight regular))
              ("bookmark" . (:foreground "yellow1" :weight bold))
              ("idea" . (:foreground "pink" :weight bold))
              ("distraction" . (:foreground "red1" :weight bold))))))

#+end_src

**** TODO Agenda

Move the keybinds out of this section

#+begin_src emacs-lisp

  (defun me/org-agenda-setup ()
    (progn
      (evil-define-key 'motion org-agenda-mode-map (kbd "sf") 'org-agenda-filter)
      (evil-define-key 'motion org-agenda-mode-map (kbd "zc") 'evil-close-fold)
      (evil-define-key 'motion org-agenda-mode-map (kbd "zo") 'evil-open-fold)
      (evil-define-key 'motion org-agenda-mode-map (kbd "zr") 'evil-open-folds)
      (evil-define-key 'motion org-agenda-mode-map (kbd "zm") 'evil-close-folds)
      (evil-define-key 'motion org-agenda-mode-map (kbd "zO") 'evil-open-fold-rec)
      (evil-define-key 'motion org-agenda-mode-map (kbd "za") 'evil-toggle-fold)
      (setq org-agenda-files me/org-agenda-files)
      (setq org-agenda-start-with-log-mode nil)
      (setq org-agenda-use-time-grid nil)
      (setq org-agenda-start-on-weekday nil)
      (setq org-agenda-start-day nil)
      (setq org-agenda-span 7)
      (setq org-agenda-todo-ignore-scheduled 'future)
      (setq org-agenda-skip-scheduled-if-deadline-is-shown t)
      (setq org-agenda-skip-scheduled-if-done t)
      (setq org-agenda-skip-deadline-if-done t)
      (setq org-deadline-warning-days 0)
      (setq org-agenda-compact-blocks t)
      (setq org-agenda-window-setup 'current-window)
      (setq org-agenda-restore-windows-after-quit t)
      (setq org-agenda-sorting-strategy '((agenda habit-down time-up priority-down category-keep)
                                          (todo priority-down category-keep)
                                          (tags priority-down category-keep)
                                          (search category-keep)))
      (setq org-agenda-tags-todo-honor-ignore-options t)

      ;; (setq org-agenda-prefix-format '((agenda  . " %i %-12:c%?-12t% s")
      ;;                                     ;(agenda  . " %i %-12:c%?-12t% s") ;; file name + org-agenda-entry-type
      ;;                                  (timeline  . "  % s")
      ;;                                  (todo  . " %i %-12:c")
      ;;                                  (tags  . " %i %-12:c")
      ;;                                  (search . " %i %-12:c")))
                                          ; https://emacs.stackexchange.com/questions/18179/org-agenda-command-with-org-agenda-filter-by-tag-not-working

      (defun me/org-agenda-place-point ()
        (goto-char (point-min)))

                                          ;(add-hook 'org-agenda-finalize-hook (lambda () (goto-char (point-min))) 90)
                                          ;(remove-hook 'org-agenda-finalize-hook 'me/org-agenda-place-at-point)

      (add-hook 'org-agenda-finalize-hook #'me/org-agenda-place-point 90)
      ))
#+end_src

**** Capture

#+begin_src emacs-lisp

  (defun me/org-capture-setup ()
    (progn
      (setq org-capture-templates
            '(
              ;; Personal ;;
              ("d" "Distraction" entry
               (file+olp+datetree me/org-distractions-file)
               "* %U - %? :distraction:\n")

              ("n" "Note" entry
               (file me/org-note-inbox-file)
               "* NOTE %?\n%U\n" :prepend t)

              ("t" "Task" entry
               (file+headline me/org-todo-file "Personal Inbox")
               "* TODO %?\n%T\n" :prepend t)

              ("T" "Task (Scheduled)" entry
               (file+headline me/org-todo-file "Personal Inbox")
               "* TODO %?\nSCHEDULED: %^T\n" :prepend t)

              ("a" "Scheduled Appointment" entry
               (file+headline me/org-todo-file "Appointments")
               "* APT %?\n%^T\n" :prepend t)

              ("A" "Active Appointment Notes" entry
               (file+headline me/org-personal-note-file "Appointment Notes")
               "* NOTE %?\n%U\n" :prepend t :clock-in t :clock-resume t)

              ("s" "Snippet" entry
               (file+headline me/org-snippet-file "Snippet Inbox")
               "* %?\n%U\n%i\n" :prepend t)

              ("i" "Interuptions" entry
               (file+headline me/org-todo-file "Interuptions")
               "* INTR %?\n%T\n" :prepend t :clock-in t :clock-resume t)

              ("j" "Journal" entry
               (file+olp+datetree "~/Org/journal.org")
               "* %U - %?\n")

              ;; Work ;;
              ("w" "Work Captures")

              ("wt" "Work Task" entry
               (file+headline me/org-todo-file "Work Inbox")
               "* TODO %?\n%T\n" :prepend t)

              ("wT" "Work Task (Scheduled)" entry
               (file+headline me/org-todo-file "Work Inbox")
               "* TODO %?\nSCHEDULED: %^T\n" :prepend t)

              ("wm" "Scheduled Meeting" entry
               (file+headline me/org-todo-file "Work Meetings")
               "* APT %?\n%^T\n" :prepend t)

              ("wM" "Active Meeting Notes" entry
               (file+headline me/org-work-note-file "Meeting Notes")
               "* NOTE %?\n%U\n" :prepend t :clock-in t :clock-resume t)

              ("wf" "Family Office Task" entry
               (file+headline me/org-projects-file "Family Office")
               "* TODO %?\n%T\n" :prepend t)

              ("ws" "Shareholder Task" entry
               (file+headline me/org-projects-file "Shareholder")
               "* TODO %?\n%T\n" :prepend t)

              ("wa" "Architecture Task" entry
               (file+headline me/org-projects-file "Architecture")
               "* TODO %?\n%T\n" :prepend t)
              ))))
#+end_src

**** Fonts

#+begin_src emacs-lisp

  (defun me/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-hide nil :inherit 'fixed-pitch))

#+end_src

*** Org Setup

**** Org Package
#+begin_src emacs-lisp

  (use-package org
    :commands (org-capture org-agenda)
    :hook (org-mode . me/org-mode-initial-setup)
    :bind (("C-c c" . org-capture)
           ("C-c a" . org-agenda)
           ("C-c l" . org-store-link)
           ("C-c o s" . org-save-all-org-buffers)
           :map org-mode-map
           ("C-c ?" . nil)
           ("C-c T ?" . org-table-field-info)
           :map org-agenda-mode-map
           ("C-c o l" . org-agenda-log-mode))
    :config
    (me/org-settings-setup)
    (me/org-habit-setup)
    (me/org-todo-tag-setup)
    (me/org-agenda-setup)
    (me/org-capture-setup)
    (me/org-font-setup)
    (require 'org-protocol))
#+end_src

**** Org Contrib

#+begin_src emacs-lisp

  (use-package org-contrib
    :after org)

#+end_src

*** Appearance
**** Superstar

#+begin_src emacs-lisp

  (use-package org-superstar
    :after org
    :hook (org-mode . org-superstar-mode)
    :config
    (set-face-attribute 'org-superstar-header-bullet nil :inherit 'fixed-pitched :height 180)
    :custom
    (org-superstar-todo-bullet-alist
     '(("TODO" . ?λ)
       ("NEXT" . ?✰)
       ("PROG" . ?∞)
       ("INTR" . ?‼)
       ("DONE" . ?✔)
       ("CANCELLED" . ?✘)
       ("NOTE" . ?✎)
       ("PROJ" . ?⚙)
       ("IDEA" . ?⚛)
       ("DEPR" . ?✘)))

   (org-superstar-item-bullet-alist
          '((?* . ?•)
            (?+ . ?➤)
            (?- . ?•)))

    (org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●"))
    (org-superstar-special-todo-items t)
    (org-superstar-leading-bullet ""))
#+end_src

**** Center Org Buffers

We use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center =org-mode= buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document.  This is really a matter of personal preference so you can remove the block below if you don't like the behavior.

#+begin_src emacs-lisp

  (defun me/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . me/org-mode-visual-fill))

#+end_src
**** Pretty Tags

#+begin_src emacs-lisp

  (use-package org-pretty-tags
    :commands (org-pretty-tags-global-mode)
    :init (org-pretty-tags-global-mode t)
    :config
    (setq org-pretty-tags-surrogate-strings '(("@errand" "🛒")
                                              ("@home" "🏡")
                                              ("@work" "💼")
                                              ("@emacs" "⌨️")
                                              ("routine" "🔁")
                                              ("inbox" "📥")
                                              ("bookmark" "🔖")
                                              ("idea" "💡")
                                              ("distraction" "❓")
                                              ("ARCHIVE" "🗄️")
                                              )))
#+end_src

*** Org Super Agenda

#+begin_src emacs-lisp

  (use-package org-super-agenda
    :config
    (org-super-agenda-mode)
    (setq org-agenda-custom-commands
          '(("c" "Clean agenda"
             ((agenda "" ((org-agenda-span 1)(org-agenda-tag-filter-preset '("-groceries" "-routine"))))))
            ("r" "Routines"
             ((agenda "" ((org-agenda-span 1)(org-agenda-tag-filter-preset '("+routine"))))))
            ("i" "Inbox"
             ((alltodo "" ((org-agenda-tag-filter-preset '("+inbox"))))))
            ("w" "Work Agenda"
             ((agenda "" ((org-agenda-span 7)
                          (org-agenda-tag-filter-preset '("+@work"))))))
            ("s" "SUPER AGENDA"
             ((agenda "" ((org-agenda-span 1)))
              (tags-todo "+inbox-@work")
              (tags-todo "+groceries")
              (tags-todo "+routine")
              (tags-todo "+work")
              (alltodo "")))
            ("a" "POG AGENDA"
             ((agenda "" ((org-agenda-span 'day)
                          (org-super-agenda-groups
                           '((:discard (:todo ("DONE" "CANCELLED")))
                             (:name "In Progress" :todo "PROG" :order 1)
                             (:name "Habits" :habit t :order 98)

                             (:name "Today"
                                    :time-grid t
                                    :date t
                                    :order 2)))))
              (alltodo "" ((org-agenda-todo-ignore-scheduled nil)
                           (org-agenda-show-inherited-tags nil)
                           (org-agenda-overriding-header "")
                           (org-super-agenda-groups
                            '((:auto-category t)
                              (:name "Next to do"
                                     :todo "NEXT"
                                     :order 1)
                              (:name "Interupts"
                                     :todo "INTR"
                                     :order 2)
                              (:name "Due Today"
                                     :deadline today
                                     :order 3)
                              (:name "Due Soon"
                                     :deadline future
                                     :order 4)
                              (:name "Overdue"
                                     :deadline past
                                     :order 5)
                              (:name "Projects"
                                     :todo "PROJ"
                                     :order 6)
                              (:name "Home Tasks"
                                     :tag "@home"
                                     :order 7)
                              (:name "Errands"
                                     :tag "@errand"
                                     :order 8)
                              (:name "Emacs"
                                     :tag "@emacs"
                                     :order 9)
                              (:name "Ideas"
                                     :tag "idea"
                                     :todo "IDEA"
                                     :order 10)
                              (:name "Bookmarks"
                                     :tag "bookmark"
                                     :order 11)
                              (:name "Work"
                                     :tag "@work"
                                     :order 12)
                              (:name "Future"
                                     :scheduled future
                                     :order 13)
                              (:discard (:anything))
                              )))))
             ((org-agenda-show-inherited-tags nil)
              (org-agenda-compact-blocks t))
             )))
    (setq org-super-agenda-header-map nil))
    ;(evil-define-key 'motion org-agenda-mode-map (kbd "q") 'org-agenda-quit))
#+end_src

*** Org QL

#+begin_src emacs-lisp
  (use-package org-ql)
#+end_src

*** Babel
**** Configure Babel Languages

To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use.  [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp

  (setq org-confirm-babel-evaluate nil)

  (with-eval-after-load 'org
    (org-babel-do-load-languages
        'org-babel-load-languages
        '((emacs-lisp . t)
        (python . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes))

#+end_src

**** Auto-tangle Configuration Files

This snippet adds a hook to =org-mode= buffers so that =me/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun me/org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name user-emacs-directory))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'me/org-babel-tangle-config)))

#+end_src

** Development
*** Languages

**** IDE Features with lsp-mode

***** lsp-mode

We use the excellent [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] to enable IDE-like functionality for many different programming languages via "language servers" that speak the [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]].  Before trying to set up =lsp-mode= for a particular language, check out the [[https://emacs-lsp.github.io/lsp-mode/page/languages/][documentation for your language]] so that you can learn which language servers are available and how to install them.

The =lsp-keymap-prefix= setting enables you to define a prefix for where =lsp-mode='s default keybindings will be added.  I *highly recommend* using the prefix to find out what you can do with =lsp-mode= in a buffer.

The =which-key= integration adds helpful descriptions of the various keys so you should be able to learn a lot just by pressing =C-c l= in a =lsp-mode= buffer and trying different things that you find there.

#+begin_src emacs-lisp

  (defun me/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . me/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t))

#+end_src

***** lsp-ui

[[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] is a set of UI enhancements built on top of =lsp-mode= which make Emacs feel even more like an IDE.  Check out the screenshots on the =lsp-ui= homepage (linked at the beginning of this paragraph) to see examples of what it can do.

#+begin_src emacs-lisp

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

#+end_src

***** lsp-treemacs

[[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]] provides nice tree views for different aspects of your code like symbols in a file, references of a symbol, or diagnostic messages (errors and warnings) that are found in your code.

Try these commands with =M-x=:

- =lsp-treemacs-symbols= - Show a tree view of the symbols in the current file
- =lsp-treemacs-references= - Show a tree view for the references of the symbol under the cursor
- =lsp-treemacs-error-list= - Show a tree view for the diagnostic messages in the project

This package is built on the [[https://github.com/Alexander-Miller/treemacs][treemacs]] package which might be of some interest to you if you like to have a file browser at the left side of your screen in your editor.

#+begin_src emacs-lisp

  (use-package lsp-treemacs
    :after lsp)

#+end_src

**** Debugging with dap-mode

[[https://emacs-lsp.github.io/dap-mode/][dap-mode]] is an excellent package for bringing rich debugging capabilities to Emacs via the [[https://microsoft.github.io/debug-adapter-protocol/][Debug Adapter Protocol]].  You should check out the [[https://emacs-lsp.github.io/dap-mode/page/configuration/][configuration docs]] to learn how to configure the debugger for your language.  Also make sure to check out the documentation for the debug adapter to see what configuration parameters are available to use for your debug templates!

#+begin_src emacs-lisp

  (use-package dap-mode
    ;; Uncomment the config below if you want all UI panes to be hidden by default!
    ;; :custom
    ;; (lsp-enable-dap-auto-configure nil)
    ;; :config
    ;; (dap-ui-mode 1)
    :commands dap-debug
    :config
    ;; Set up Node debugging
    (require 'dap-node)
    (dap-node-setup)) ;; Automatically installs Node debug adapter if needed

#+end_src

**** TypeScript

This is a basic configuration for the TypeScript language so that =.ts= files activate =typescript-mode= when opened.  We're also adding a hook to =typescript-mode-hook= to call =lsp-deferred= so that we activate =lsp-mode= to get LSP features every time we edit TypeScript code.

#+begin_src emacs-lisp

  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))

#+end_src

*Important note!*  For =lsp-mode= to work with TypeScript (and JavaScript) you will need to install a language server on your machine.  If you have Node.js installed, the easiest way to do that is by running the following command:

#+begin_src shell :tangle no

npm install -g typescript-language-server typescript

#+end_src

This will install the [[https://github.com/theia-ide/typescript-language-server][typescript-language-server]] and the TypeScript compiler package.

**** Python

We use =lsp-mode= and =dap-mode= to provide a more complete development environment for Python in Emacs.  Check out [[https://emacs-lsp.github.io/lsp-mode/page/lsp-pyls/][the =pyls= configuration]] in the =lsp-mode= documentation for more details.

Make sure you have the =pyls= language server installed before trying =lsp-mode=!

#+begin_src sh :tangle no

pip install --user "python-language-server[all]"

#+end_src

There are a number of other language servers for Python so if you find that =pyls= doesn't work for you, consult the =lsp-mode= [[https://emacs-lsp.github.io/lsp-mode/page/languages/][language configuration documentation]] to try the others!

#+begin_src emacs-lisp

  (use-package python-mode
    :ensure t
    :hook (python-mode . lsp-deferred)
    :custom
    ;; NOTE: Set these if Python 3 is called "python3" on your system!
    ;; (python-shell-interpreter "python3")
    ;; (dap-python-executable "python3")
    (dap-python-debugger 'debugpy)
    :config
    (require 'dap-python))


#+end_src

You can use the pyvenv package to use =virtualenv= environments in Emacs.  The =pyvenv-activate= command should configure Emacs to cause =lsp-mode= and =dap-mode= to use the virtual environment when they are loaded, just select the path to your virtual environment before loading your project.

#+begin_src emacs-lisp

  (use-package pyvenv
    :after python-mode
    :config
    (pyvenv-mode 1))

#+end_src

**** Json

#+begin_src emacs-lisp

  (use-package json-mode)

#+end_src

*** Company Mode

[[http://company-mode.github.io/][Company Mode]] provides a nicer in-buffer completion interface than =completion-at-point= which is more reminiscent of what you would expect from an IDE.  We add a simple configuration to make the keybindings a little more useful (=TAB= now completes the selection and initiates completion at the current location if needed).

We also use [[https://github.com/sebastiencs/company-box][company-box]] to further enhance the look of the completions with icons and better overall presentation.

#+begin_src emacs-lisp :tangle no

  (use-package company
  ;:hook (lsp-mode . company-mode)
    :hook (prog-mode . company-mode)
    :bind (:map company-active-map
                ("<tab>" . company-complete-selection))
  ;  (:map lsp-mode-map
  ;        ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0)
    :config
    (global-company-mode))
  (use-package company-box
    :hook (company-mode . company-box-mode))
#+end_src

*** Projectile

[[https://projectile.mx/][Projectile]] is a project management library for Emacs which makes it a lot easier to navigate around code projects for various languages.  Many packages integrate with Projectile so it's a good idea to have it installed even if you don't use its commands directly.

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/Projects/Code")
      (setq projectile-project-search-path '("~/Projects/Code")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))

#+end_src

*** Magit

[[https://magit.vc/][Magit]] is the best Git interface I've ever used.  Common Git operations are easy to execute quickly using Magit's command panel system.

#+begin_src emacs-lisp

  (use-package magit
    :bind (("C-c g s" . magit))
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  ;; NOTE: Make sure to configure a GitHub token before using this package!
  ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
  ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
  (use-package forge
    :after magit)

#+end_src

*** Commenting

Emacs' built in commenting functionality =comment-dwim= (usually bound to =M-;=) doesn't always comment things in the way you might expect so we use [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] to provide a more familiar behavior.  I've bound it to =M-/= since other editors sometimes use this binding but you could also replace Emacs' =M-;= binding with this command.

#+begin_src emacs-lisp

  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))

#+end_src

*** Rainbow Delimiters

[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth.  This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

#+begin_src emacs-lisp

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

*** Formatting
#+begin_src emacs-lisp

  (use-package format-all
    :hook (prog-mode . format-all-mode)
    :bind(("C-c F" . format-all-buffer)
          ("C-c x f b" . format-all-buffer)))

#+end_src
** Terminals

*** term-mode

=term-mode= is a built-in terminal emulator in Emacs.  Because it is written in Emacs Lisp, you can start using it immediately with very little configuration.  If you are on Linux or macOS, =term-mode= is a great choice to get started because it supports fairly complex terminal applications (=htop=, =vim=, etc) and works pretty reliably.  However, because it is written in Emacs Lisp, it can be slower than other options like =vterm=.  The speed will only be an issue if you regularly run console apps with a lot of output.

One important thing to understand is =line-mode= versus =char-mode=.  =line-mode= enables you to use normal Emacs keybindings while moving around in the terminal buffer while =char-mode= sends most of your keypresses to the underlying terminal.  While using =term-mode=, you will want to be in =char-mode= for any terminal applications that have their own keybindings.  If you're just in your usual shell, =line-mode= is sufficient and feels more integrated with Emacs.

With =evil-collection= installed, you will automatically switch to =char-mode= when you enter Evil's insert mode (press =i=).  You will automatically be switched back to =line-mode= when you enter Evil's normal mode (press =ESC=).

Run a terminal with =M-x term!=

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =C-c C-k= - Enter char-mode
- =C-c C-j= - Return to line-mode
- If you have =evil-collection= installed, =term-mode= will enter char mode when you use Evil's Insert mode

#+begin_src emacs-lisp

  (use-package term
    :commands term
    :config
    (setq explicit-shell-file-name "bash") ;; Change this to zsh, etc
    ;;(setq explicit-zsh-args '())         ;; Use 'explicit-<shell>-args for shell-specific args

    ;; Match the default Bash shell prompt.  Update this if you have a custom prompt
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))

#+end_src

**** Better term-mode colors

The =eterm-256color= package enhances the output of =term-mode= to enable handling of a wider range of color codes so that many popular terminal applications look as you would expect them to.  Keep in mind that this package requires =ncurses= to be installed on your machine so that it has access to the =tic= program.  Most Linux distributions come with this program installed already so you may not have to do anything extra to use it.

#+begin_src emacs-lisp

  (use-package eterm-256color
    :hook (term-mode . eterm-256color-mode))

#+end_src

*** vterm

[[https://github.com/akermu/emacs-libvterm/][vterm]] is an improved terminal emulator package which uses a compiled native module to interact with the underlying terminal applications.  This enables it to be much faster than =term-mode= and to also provide a more complete terminal emulation experience.

Make sure that you have the [[https://github.com/akermu/emacs-libvterm/#requirements][necessary dependencies]] installed before trying to use =vterm= because there is a module that will need to be compiled before you can use it successfully.

#+begin_src emacs-lisp

  (use-package vterm
    :commands vterm
    :bind (("C-c t" . vterm))
    :config
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
    (setq vterm-shell "fish")                       ;; Set this to customize the shell to launch
    (setq vterm-max-scrollback 10000)
    )

#+end_src

*** shell-mode

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Interactive-Shell.html#Interactive-Shell][shell-mode]] is a middle ground between =term-mode= and Eshell.  It is *not* a terminal emulator so more complex terminal programs will not run inside of it.  It does have much better integration with Emacs because all command input in this mode is handled by Emacs and then sent to the underlying shell once you press Enter.  This means that you can use =evil-mode='s editing motions on the command line, unlike in the terminal emulator modes above.

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =M-p= / =M-n= - go back and forward in the input history
- =C-c C-u= - delete the current input string backwards up to the cursor
- =counsel-shell-history= - A searchable history of commands typed into the shell

One advantage of =shell-mode= on Windows is that it's the only way to run =cmd.exe=, PowerShell, Git Bash, etc from within Emacs.  Here's an example of how you would set up =shell-mode= to run PowerShell on Windows:

#+begin_src emacs-lisp

  (when (eq system-type 'windows-nt)
    (setq explicit-shell-file-name "powershell.exe")
    (setq explicit-powershell.exe-args '()))

#+end_src

*** Eshell

[[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html#Contributors-to-Eshell][Eshell]] is Emacs' own shell implementation written in Emacs Lisp.  It provides you with a cross-platform implementation (even on Windows!) of the common GNU utilities you would find on Linux and macOS (=ls=, =rm=, =mv=, =grep=, etc).  It also allows you to call Emacs Lisp functions directly from the shell and you can even set up aliases (like aliasing =vim= to =find-file=).  Eshell is also an Emacs Lisp REPL which allows you to evaluate full expressions at the shell.

The downsides to Eshell are that it can be harder to configure than other packages due to the particularity of where you need to set some options for them to go into effect, the lack of shell completions (by default) for some useful things like Git commands, and that REPL programs sometimes don't work as well.  However, many of these limitations can be dealt with by good configuration and installing external packages, so don't let that discourage you from trying it!

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =M-p= / =M-n= - go back and forward in the input history
- =C-c C-u= - delete the current input string backwards up to the cursor
- =counsel-esh-history= - A searchable history of commands typed into Eshell

We will be covering Eshell more in future videos highlighting other things you can do with it.

For more thoughts on Eshell, check out these articles by Pierre Neidhardt:
- https://ambrevar.xyz/emacs-eshell/index.html
- https://ambrevar.xyz/emacs-eshell-versus-shell/index.html

#+begin_src emacs-lisp

  (defun me/configure-eshell ()
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    ;; Bind some useful keys for evil-mode
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
    (evil-normalize-keymaps)

    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))

  (use-package eshell-git-prompt
    :after eshell)

  (use-package eshell
    :hook (eshell-first-time-mode . me/configure-eshell)
    :config

    (with-eval-after-load 'esh-opt
      (setq eshell-destroy-buffer-when-process-dies t)
      (setq eshell-visual-commands '("htop" "zsh" "vim")))

    (eshell-git-prompt-use-theme 'powerline))


#+end_src

*** Fish Mode

#+begin_src emacs-lisp

  (use-package fish-mode)
  
#+end_src

** File Management

*** Dired

Dired is a built-in file manager for Emacs that does some pretty amazing things!  Here are some key bindings you should try out:

**** Key Bindings

***** MacOS Specific Settings

#+begin_src emacs-lisp

  (when (string= system-type "darwin")
    (setq dired-use-ls-dired t
          insert-directory-program "/opt/homebrew/bin/gls"
          dired-listing-switches "-aBhl --group-directories-first"))

#+end_src

***** Navigation

*Emacs* / *Evil*
- =n= / =j= - next line
- =p= / =k= - previous line
- =j= / =J= - jump to file in buffer
- =RET= - select file or directory
- =^= - go to parent directory
- =S-RET= / =g O= - Open file in "other" window
- =M-RET= - Show file in other window without focusing (previewing files)
- =g o= (=dired-view-file=) - Open file but in a "preview" mode, close with =q=
- =g= / =g r= Refresh the buffer with =revert-buffer= after changing configuration (and after filesystem changes!)

***** Marking files

- =m= - Marks a file
- =u= - Unmarks a file
- =U= - Unmarks all files in buffer
- =* t= / =t= - Inverts marked files in buffer
- =% m= - Mark files in buffer using regular expression
- =*= - Lots of other auto-marking functions
- =k= / =K= - "Kill" marked items (refresh buffer with =g= / =g r= to get them back)
- Many operations can be done on a single file if there are no active marks!

***** Copying and Renaming files

- =C= - Copy marked files (or if no files are marked, the current file)
- Copying single and multiple files
- =U= - Unmark all files in buffer
- =R= - Rename marked files, renaming multiple is a move!
- =% R= - Rename based on regular expression: =^test= , =old-\&=

*Power command*: =C-x C-q= (=dired-toggle-read-only=) - Makes all file names in the buffer editable directly to rename them!  Press =Z Z= to confirm renaming or =Z Q= to abort.

***** Deleting files

- =D= - Delete marked file
- =d= - Mark file for deletion
- =x= - Execute deletion for marks
- =delete-by-moving-to-trash= - Move to trash instead of deleting permanently

***** Creating and extracting archives

- =Z= - Compress or uncompress a file or folder to (=.tar.gz=)
- =c= - Compress selection to a specific file
- =dired-compress-files-alist= - Bind compression commands to file extension

***** Other common operations

- =T= - Touch (change timestamp)
- =M= - Change file mode
- =O= - Change file owner
- =G= - Change file group
- =S= - Create a symbolic link to this file
- =L= - Load an Emacs Lisp file into Emacs

**** Configuration

#+begin_src emacs-lisp

  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (setq dired-dwim-target t)
    (evil-collection-define-key 'normal 'dired-mode-map
        "h" 'dired-single-up-directory
        "l" 'dired-single-buffer)
    )

  (use-package dired-single
    :commands (dired dired-jump))

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-open
    :commands (dired dired-jump)
    :config
    ;; Doesn't work as expected!
    ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
    (setq dired-open-extensions '(("png" . "feh")
                                  ("mkv" . "mpv"))))

  (use-package dired-hide-dotfiles
    ;;:hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "H" 'dired-hide-dotfiles-mode))

#+end_src

** Applications

*** IRC

#+begin_src emacs-lisp

  (setq erc-server "irc.libera.chat"
        erc-nick "geoffery"
        erc-user-full-name "Geoffery"
        erc-track-shorten-start 8
        erc-autojoin-channels-alist '(("irc-libera.chat" "#emacs"))
        erc-kill-buffer-on-part t
        erc-auto-query 'bury)

#+end_src
*** Some App

This is an example of configuring another non-Emacs application using org-mode.  Not only do we write out the configuration at =.config/some-app/config=, we also compute the value that gets stored in this configuration from the Emacs Lisp block above it.

#+NAME: the-value
#+begin_src emacs-lisp :tangle no

  (+ 55 100)

#+end_src

*NOTE*: Set the =:tangle= parameter below to =.config/some-app/config= for this to work!

#+begin_src conf :tangle no :noweb yes

  value=<<the-value()>>

#+end_src

* Runtime Performance

Dial the GC threshold back down so that garbage collection happens more frequently but in less time.

#+begin_src emacs-lisp

  ;; Make gc pauses faster by decreasing the threshold.
  (setq gc-cons-threshold (* 2 1000 1000))

#+end_src
